server:
  port: 8080

spring:
  jackson:
    date-format: yyyy-MM-dd'T'HH:mm:ss'Z'
    time-zone: UTC
  kafka:
    bootstrap-servers: ${app.kafka.bootstrap-servers}
    listener:
      retry:
        interval: 1000
        max-attempts: 3
    consumer:
      group-id: message-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.type.mapping: >-
          request:com.example.messagingapp.dto.MessageRequest,
          response:com.example.messagingapp.dto.MessageResponse
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  flyway:
    enabled: true
    user: postgres
    password: postgres
    url: jdbc:postgresql://postgres:5432/postgres
    locations: classpath:db/migration
  datasource:
    url: jdbc:postgresql://postgres:5432/postgres
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: true

app:
  kafka:
    input-topic: input-messages
    output-topic: output-messages
    bootstrap-servers: kafka:9092

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    tagsSorter: alpha
    operationsSorter: alpha
  api-docs:
    path: /api-docs
    version: openapi_3_1


logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    root: INFO
    org.springframework: INFO
    org.apache.kafka: INFO
    com.example.messagingapp: INFO
  file:
    name: app/logs/application.log  # Путь к файлу логов
  pattern:
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    console: "%d{HH:mm:ss} %-5level %logger{36} - %msg%n"

resilience4j:
  circuitbreaker:           # Основная секция для настройки Circuit Breaker
    instances:             # Определение конкретных экземпляров Circuit Breaker
      kafkaProducer:       # Имя экземпляра (используется в @CircuitBreaker(name = "kafkaProducer"))
        # Тип скользящего окна для подсчета ошибок
        sliding-window-type: COUNT_BASED  # Альтернатива: TIME_BASED (анализ за временной промежуток)
        # Размер окна для анализа ошибок
        sliding-window-size: 10  # Анализировать последние 10 вызовов
        # Минимальное количество вызовов перед активацией CB
        minimum-number-of-calls: 5  # Нужно минимум 5 вызовов для анализа статистики
        # Порог процента ошибок для размыкания цепи
        failure-rate-threshold: 50  # Размыкать цепь при 50% ошибок в окне
        # Время в разомкнутом состоянии
        wait-duration-in-open-state: 30s  # После размыкания ждать 30 секунд перед попыткой восстановления
        # Количество тестовых запросов в полуоткрытом состоянии
        permitted-number-of-calls-in-half-open-state: 3  # Пропустить 3 запроса для проверки восстановления
        # Исключения, которые считаются ошибками для CB
        record-exceptions:
          - org.springframework.kafka.KafkaException  # Все исключения Kafka
          - java.util.concurrent.TimeoutException     # Таймауты при работе с Kafka